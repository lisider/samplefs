1.day2的目标
	填充 super_block 结构体

2.day2需要熟悉的api及数据结构
	struct super_block
		s_fs_info 		 // 文件系统实例的私有数据,一次mount为一个实例
		s_maxbytes 		 // 文件系统中最大文件的尺寸
		s_blocksize      // 文件系统的块大小,用科学计数法表示 ax2^n , 这里表示 a
		s_blocksize_bits // 文件系统的块大小,用科学计数法表示 ax2^n ,这里表示 n
		s_magic 		 // 一个文件系统的魔术标识
		s_op 			 // super_block 的 操作函数集
		s_time_gran 	 // TODO

	iget_locked
		// 获取一个inode
	d_make_root
		// 根据该 inode 创建root dentry
	struct super_operations
		statfs
		drop_inode
		put_super
	struct inode
	struct dentry
	struct mount
		代表一个mount实例
	struct vfsmount

3.day2的状态
	插入后可mount
	$ mount -t samplefs -o nodev /opt /dev/zero
	$ mount
	/opt on /dev/zero type samplefs (rw,nodev,relatime)
	$ df /opt/
	Filesystem           1K-blocks      Used Available Use% Mounted on
	/dev/root               144646     33742    100152  25% /

4.day2的应用状态 TODO
	day2 实现的文件系统能mount吗?
		能
	day2 注册的 文件系统的回调函数是什么时候调用的
	# mount -t samplefs -o nodev /opt /dev/zero
	CPU: 0 PID: 725 Comm: mount Tainted: G           O    4.0.0 #15
	Hardware name: ARM-Versatile Express
	[<80016ca4>] (unwind_backtrace) from [<80012bc8>] (show_stack+0x20/0x24)
	[<80012bc8>] (show_stack) from [<80542fb4>] (dump_stack+0x90/0xa0)
	[<80542fb4>] (dump_stack) from [<7f000060>] (samplefs_fill_super+0x24/0x1d4
			[samplefs])
	[<7f000060>] (samplefs_fill_super [samplefs]) from [<80118398>]
(mount_nodev+0x54/0xac)
	[<80118398>] (mount_nodev) from [<7f000234>] (samplefs_mount+0x24/0x28
			[samplefs])
	[<7f000234>] (samplefs_mount [samplefs]) from [<801190fc>]
(mount_fs+0x24/0xb4)
	[<801190fc>] (mount_fs) from [<80133e04>] (vfs_kern_mount+0x58/0x110)
	[<80133e04>] (vfs_kern_mount) from [<80136bbc>] (do_mount+0x1a4/0xa88)
	[<80136bbc>] (do_mount) from [<80137820>] (SyS_mount+0x84/0xb0)
	[<80137820>] (SyS_mount) from [<8000ec00>] (ret_fast_syscall+0x0/0x34)

		ret_fast_syscall
			SyS_mount
				do_mount
					vfs_kern_mount // 创建一个 vfsmount 结构体
						mount_fs
							samplefs_mount
								mount_nodev
									samplefs_fill_super
					do_add_mount   // 将得到的vfsmount结构加入全局目录树
						graft_tree
							attach_recursive_mnt
								mnt_set_mountpoint
									child_mnt->mnt_mountpoint = dget(mp->m_dentry);

	# umount /opt/
[<80016ca4>] (unwind_backtrace) from [<80012bc8>] (show_stack+0x20/0x24)
	[<80012bc8>] (show_stack) from [<80542fb4>] (dump_stack+0x90/0xa0)
	[<80542fb4>] (dump_stack) from [<7f00001c>] (samplefs_put_super+0x1c/0x3c
			[samplefs])
	[<7f00001c>] (samplefs_put_super [samplefs]) from [<80117358>]
(generic_shutdown_super+0x80/0x100)
	[<80117358>] (generic_shutdown_super) from [<80117674>]
(kill_anon_super+0x1c/0x28)
	[<80117674>] (kill_anon_super) from [<80117a3c>]
(deactivate_locked_super+0x68/0x8c)
	[<80117a3c>] (deactivate_locked_super) from [<80117f04>]
(deactivate_super+0x68/0x6c)
	[<80117f04>] (deactivate_super) from [<80134280>] (cleanup_mnt+0x4c/0x90)
	[<80134280>] (cleanup_mnt) from [<80134338>] (__cleanup_mnt+0x1c/0x20)
	[<80134338>] (__cleanup_mnt) from [<800408e8>] (task_work_run+0xbc/0xf4)
	[<800408e8>] (task_work_run) from [<80012438>] (do_work_pending+0x90/0xb8)
	[<80012438>] (do_work_pending) from [<8000ec44>]
	(work_pending+0xc/0x20)



	SyS_umount
		umount_tree
			mntput_no_expire
				task_work_add
					kick_process

					------------

					work_pending
						do_work_pending
							task_work_run
								__cleanup_mnt
									cleanup_mnt
										deactivate_super
											deactivate_locked_super
												kill_anon_super
													generic_shutdown_super
														samplefs_put_super

5. inode 在 哈希表中的图示
	static struct hlist_head *inode_hashtable __read_mostly;
		该变量被
			start_kernel->
				vfs_caches_init_early->
					inode_init_early 初始化
				vfs_caches_init->
					inode_init
		初始化了哈希表链表的表头

	一个inode对应一个客体文件（或目录），携带这个文件的所有元信息，包括
		文件属性
		占用空间等信息
	其与On-disk的inode对应
	inode 与 dentry一一对应

6. dentry 在文件系统中的位置
	是directory entry的缩写，是一个抽象话概念，不对应On-disk结构
	从其字面意思也可以看出它是内核为构建和访问目录树形结构服务的
	是目录与其下文件的缓存,主要信息包括
		文件名
		其parent目录名
	一个dentry链表常常是可以从一个文件向上追踪其每一个parent directory，直到root。
	注意，在内核中可能出现多个dentries结构对应一个inode，比如硬链接就是两个不同名的文件对应一个inode

	挂载一个具体的文件系统,只会有一个root dentry,不管创建多少挂载实例,都会只有一个实例
	挂载会引起 root dentry 的创建,注册不会

7. vfs_kern_mount
		1. alloc_vfsmnt创造一个新的struct mount结构
		2. 在mount_fs函数里调用特定文件系统的mount回调函数构造一个root dentry，包含特定文件系统的super block信息
		3. 用第二步得到的结果完成对struct mount的构造，返回vfsmnt结构

8. mount_fs
	1.目标是调用注册文件系统的mount成员返回dentry
	2.首选构造一个 super_block
	3.其次填充这个 super_block
		3.1 获取一个inode 
		3.2 根据这个inode 获得 root dentry,并赋值给 super_block 的 s_root 成员
	4.返回这个 root dentry

9. do_add_mount
	挂载图示
	https://zhuanlan.zhihu.com/p/67831794
	代码解析
	https://zhuanlan.zhihu.com/p/76419740

10. super_block 概念补充
	是一个文件系统的头部
	一般在一个文件系统的第一个block里
	存储着文件系统的最主要信息
		文件系统名称
		大小
		块大小
		inode大小
		有多少inode已用和未用
		有多少空闲block等等
	与on-disk的superblock对应
	一个文件系统的挂载会导致 super_block 的创建,注册不会导致 super_block 的创建
	如果有N个设备上文件系统(都是ext2)全部挂载, 会创建 N个
	super_block,1个file_system_type
11. mount 与 vfsmount
	如果有M次挂载实例(A挂载到b,A挂载到c,...,B挂载到z),会创建M个mount
	mount 里面包括vfsmount
